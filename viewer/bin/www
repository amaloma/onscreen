#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('player:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
server.listen(port, function () {
  console.log('Example app listening on port', port)
  /**
   * Start chromium
   */
  const spawn = require('child_process').spawn;
  var commKiosk = [ "--disable" 
      , "--disable-translate" 
      , "--disable-infobars" 
      , "--disable-suggestions-service" 
      , "--disable-save-password-bubble" 
      , "--disable-session-crashed-bubble"
      , "--start-maximized" 
      , "--incognito"
      , "--noerrdialogs"
      , "--no-context-menu"         
      , "--kiosk" 
      , "http://localhost:"+port+"/viewer"
    ]
  const chromium = spawn('chromium-browser', commKiosk);

  chromium.stdout.on('data', function(data) {
    console.log('chromium:stdout:', data);
  });

  chromium.stderr.on('data', function(data) {
    console.log('chromium:stderr:', data);
  });

  chromium.on('close', function(code) {
    console.log('chromium: child process exited with code', code);
  });
})
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/******************************************************************
 * socket.io
 */
var fs = require('fs');
var io = require('socket.io')(server);

io.on('connection', function (socket) {
  var conf = JSON.parse(fs.readFileSync('onscreen.conf.json', 'utf8'));
  if(conf.show_splash) {
    socket.emit('viewer start', { list: 0, src: '/viewer/splash_page', delay: conf.splash_page_delay});
  } else {
    socket.emit('viewer start', { list: 0, src: '/viewer/black', delay: 1});  
  }
  socket.on('viewer end', function (data) {
    // console.log('viewer end ->',data);
    var request = require("request");
    var uri = conf.url.protocal+'://localhost:'+conf.url.port+'/api/isenabled'
    // console.log("uri ->",uri);
    request({
      uri: uri,
      method: "GET",
      timeout: 10000,
      followRedirect: true,
      maxRedirects: 10
    }, function(error, response, body) {
      var bodyObj = JSON.parse(body);
      // console.log(JSON.stringify(bodyObj,null,2));
      if(error || bodyObj.err || (!bodyObj.docs.length)) {
        socket.emit('viewer start', { list: 0, src: '/viewer/black', delay: 1});
        console.log("error || body.err || (!body.docs.length)");
        return;
      }
      if(data.list > bodyObj.docs.length) data.list = 1
      if(bodyObj.docs[data.list-1].mimetype == "video") {
        const spawn = require('child_process').spawn;
        const omx = spawn('omxplayer', ['-b', './public/video/cgi3d.mp4']);
        socket.emit('viewer start', { list: data.list, src: '/viewer/black', delay: 9999});
        omx.stdout.on('data', function(data) {
          console.log("stdout:",data);
        });
        omx.stderr.on('data', function(data) {
          console.log("stderr:",data);
        });
        omx.on('close', function(code) {
          console.log("child process exited with code:",code);
          socket.emit('viewer start', { list: data.list, src: '/viewer/black', delay: 1});
        });
      } else {
        socket.emit('viewer start', { 
          list: data.list, 
          src: bodyObj.docs[data.list-1].uri, 
          delay: bodyObj.docs[data.list-1].duration
        });
      }
      console.log(bodyObj.docs[data.list-1]);
    });
  });
});
 

